/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/router';


import {
  AppMarked as AppMarked
} from './components/app-marked/app-marked';

declare global {
  interface HTMLAppMarkedElement extends AppMarked, HTMLElement {
  }
  var HTMLAppMarkedElement: {
    prototype: HTMLAppMarkedElement;
    new (): HTMLAppMarkedElement;
  };
  interface HTMLElementTagNameMap {
    "app-marked": HTMLAppMarkedElement;
  }
  interface ElementTagNameMap {
    "app-marked": HTMLAppMarkedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-marked": JSXElements.AppMarkedAttributes;
    }
  }
  namespace JSXElements {
    export interface AppMarkedAttributes extends HTMLAttributes {
      doc?: string;
    }
  }
}


import {
  FrameworkDropdown as FrameworkDropdown
} from './components/framework-dropdown/framework-dropdown';

declare global {
  interface HTMLFrameworkDropdownElement extends FrameworkDropdown, HTMLElement {
  }
  var HTMLFrameworkDropdownElement: {
    prototype: HTMLFrameworkDropdownElement;
    new (): HTMLFrameworkDropdownElement;
  };
  interface HTMLElementTagNameMap {
    "framework-dropdown": HTMLFrameworkDropdownElement;
  }
  interface ElementTagNameMap {
    "framework-dropdown": HTMLFrameworkDropdownElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "framework-dropdown": JSXElements.FrameworkDropdownAttributes;
    }
  }
  namespace JSXElements {
    export interface FrameworkDropdownAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  App as IonicDocs
} from './components/ionic-docs/ionic-docs';

declare global {
  interface HTMLIonicDocsElement extends IonicDocs, HTMLElement {
  }
  var HTMLIonicDocsElement: {
    prototype: HTMLIonicDocsElement;
    new (): HTMLIonicDocsElement;
  };
  interface HTMLElementTagNameMap {
    "ionic-docs": HTMLIonicDocsElement;
  }
  interface ElementTagNameMap {
    "ionic-docs": HTMLIonicDocsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "ionic-docs": JSXElements.IonicDocsAttributes;
    }
  }
  namespace JSXElements {
    export interface IonicDocsAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  LazyIframe as LazyIframe
} from './components/lazy-iframe/lazy-iframe';

declare global {
  interface HTMLLazyIframeElement extends LazyIframe, HTMLElement {
  }
  var HTMLLazyIframeElement: {
    prototype: HTMLLazyIframeElement;
    new (): HTMLLazyIframeElement;
  };
  interface HTMLElementTagNameMap {
    "lazy-iframe": HTMLLazyIframeElement;
  }
  interface ElementTagNameMap {
    "lazy-iframe": HTMLLazyIframeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "lazy-iframe": JSXElements.LazyIframeAttributes;
    }
  }
  namespace JSXElements {
    export interface LazyIframeAttributes extends HTMLAttributes {
      src?: string;
      title?: string;
    }
  }
}


import {
  MenuExpander as MenuExpander
} from './components/menu-expander/menu-expander';

declare global {
  interface HTMLMenuExpanderElement extends MenuExpander, HTMLElement {
  }
  var HTMLMenuExpanderElement: {
    prototype: HTMLMenuExpanderElement;
    new (): HTMLMenuExpanderElement;
  };
  interface HTMLElementTagNameMap {
    "menu-expander": HTMLMenuExpanderElement;
  }
  interface ElementTagNameMap {
    "menu-expander": HTMLMenuExpanderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "menu-expander": JSXElements.MenuExpanderAttributes;
    }
  }
  namespace JSXElements {
    export interface MenuExpanderAttributes extends HTMLAttributes {
      service?: string;
    }
  }
}


import {
  SiteContent as SiteContent
} from './components/site-content/site-content';

declare global {
  interface HTMLSiteContentElement extends SiteContent, HTMLElement {
  }
  var HTMLSiteContentElement: {
    prototype: HTMLSiteContentElement;
    new (): HTMLSiteContentElement;
  };
  interface HTMLElementTagNameMap {
    "site-content": HTMLSiteContentElement;
  }
  interface ElementTagNameMap {
    "site-content": HTMLSiteContentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "site-content": JSXElements.SiteContentAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteContentAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  SiteHeader as SiteHeader
} from './components/site-header/site-header';

declare global {
  interface HTMLSiteHeaderElement extends SiteHeader, HTMLElement {
  }
  var HTMLSiteHeaderElement: {
    prototype: HTMLSiteHeaderElement;
    new (): HTMLSiteHeaderElement;
  };
  interface HTMLElementTagNameMap {
    "site-header": HTMLSiteHeaderElement;
  }
  interface ElementTagNameMap {
    "site-header": HTMLSiteHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "site-header": JSXElements.SiteHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteHeaderAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  SiteMenu as SiteMenu
} from './components/site-menu/site-menu';

declare global {
  interface HTMLSiteMenuElement extends SiteMenu, HTMLElement {
  }
  var HTMLSiteMenuElement: {
    prototype: HTMLSiteMenuElement;
    new (): HTMLSiteMenuElement;
  };
  interface HTMLElementTagNameMap {
    "site-menu": HTMLSiteMenuElement;
  }
  interface ElementTagNameMap {
    "site-menu": HTMLSiteMenuElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "site-menu": JSXElements.SiteMenuAttributes;
    }
  }
  namespace JSXElements {
    export interface SiteMenuAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  SitePreviewApp as SitePreviewApp
} from './components/site-preview-app/site-preview-app';

declare global {
  interface HTMLSitePreviewAppElement extends SitePreviewApp, HTMLElement {
  }
  var HTMLSitePreviewAppElement: {
    prototype: HTMLSitePreviewAppElement;
    new (): HTMLSitePreviewAppElement;
  };
  interface HTMLElementTagNameMap {
    "site-preview-app": HTMLSitePreviewAppElement;
  }
  interface ElementTagNameMap {
    "site-preview-app": HTMLSitePreviewAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "site-preview-app": JSXElements.SitePreviewAppAttributes;
    }
  }
  namespace JSXElements {
    export interface SitePreviewAppAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  WistiaEmbed as WistiaEmbed
} from './components/wistia-embed/wistia-embed';

declare global {
  interface HTMLWistiaEmbedElement extends WistiaEmbed, HTMLElement {
  }
  var HTMLWistiaEmbedElement: {
    prototype: HTMLWistiaEmbedElement;
    new (): HTMLWistiaEmbedElement;
  };
  interface HTMLElementTagNameMap {
    "wistia-embed": HTMLWistiaEmbedElement;
  }
  interface ElementTagNameMap {
    "wistia-embed": HTMLWistiaEmbedElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "wistia-embed": JSXElements.WistiaEmbedAttributes;
    }
  }
  namespace JSXElements {
    export interface WistiaEmbedAttributes extends HTMLAttributes {
      wid?: string;
    }
  }
}

