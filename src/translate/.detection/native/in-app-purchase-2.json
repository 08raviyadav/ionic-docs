{
  "packageName": "@ionic-native/in-app-purchase-2",
  "displayName": "In App Purchase 2",
  "description": "\nIn-App Purchase on iOS, Android, Windows, macOS and XBox.\n\n## Features\n\n|  | ios | android | win-8 | win-10/uwp | mac |\n|--|--|--|--|--|--|\n| consumables | ✅ | ✅ | ✅ | ✅ | ✅ |\n| non consumables | ✅ | ✅ | ✅ | ✅ | ✅ |\n| subscriptions | ✅ | ✅ | ✅ | ✅ | ✅ |\n| restore purchases | ✅ | ✅ | ✅ | ✅ | ✅ |\n| receipt validations | ✅ | ✅ |  | ✅ | ✅ |\n| downloadable content | ✅ |   |   |   | ✅ |\n| introductory prices | ✅ | ✅ |   | ✅ | ✅ |\n\nSupports:\n\n - **iOS** version 7.0 or higher.\n - **Android** version 2.2 (API level 8) or higher\n   - with Google Play client version 3.9.16 or higher\n - **Windows** Store/Phone 8.1 or higher\n - **Windows 10 Mobile**\n - **macOS** version 10\n - **Xbox One**\n   - (and any platform supporting Microsoft's UWP)\n",
  "usage": "\n```typescript\nimport { InAppPurchase2 } from '@ionic-native/in-app-purchase-2/ngx';\n\nconstructor(public platform: Platform, private store: InAppPurchase2) {\n  platform.ready().then(() => {\n   this.store.register({\n     id: \"my_product_id\",\n     type: this.store.NON_RENEWING_SUBSCRIPTION,\n   });\n   this.store.when(\"my_product_id\")\n     .approved(p => p.verify())\n     .verified(p => p.finish());\n   this.store.refresh();\n  });\n}\n\n...\n\nthis.store.order(\"my_product_id\");\n\n```\n\n## Full example\n\n```typescript\n // After platform ready\n this.store.verbosity = this.store.DEBUG;\n this.store.register({\n   id: \"my_product_id\",\n   type: this.store.PAID_SUBSCRIPTION,\n });\n\n // Register event handlers for the specific product\n this.store.when(\"my_product_id\").registered( (product: IAPProduct) => {\n   console.log('Registered: ' + JSON.stringify(product));\n });\n\n // Updated\n this.store.when(\"my_product_id\").updated( (product: IAPProduct) => {\n   console.log('Updated' + JSON.stringify(product));\n });\n\n // User closed the native purchase dialog\n this.store.when(\"my_product_id\").cancelled( (product) => {\n     console.error('Purchase was Cancelled');\n });\n\n // Track all store errors\n this.store.error( (err) => {\n   console.error('Store Error ' + JSON.stringify(err));\n });\n\n // Run some code only when the store is ready to be used\n this.store.ready(() =>  {\n   console.log('Store is ready');\n   console.log('Products: ' + JSON.stringify(this.store.products));\n   console.log(JSON.stringify(this.store.get(\"my_product_id\")));\n });\n\n // Refresh the status of in-app products\n this.store.refresh();\n\n ...\n\n // To make a purchase\n this.store.order(\"my_product_id\");\n\n```\n\n## Philosophy\n\nThe API is mostly events based. As a user of this plugin,\nyou will have to register listeners to changes happening to the products\nyou register.\n\nThe core of the listening mechanism is the `when()` method. It allows you to\nbe notified of changes to one or a set of products using a query mechanism:\n```typescript\n this.store.when(\"product\").updated(refreshScreen); // match any product\n this.store.when(\"full_version\").owned(unlockApp); // match a specific product\n this.store.when(\"subscription\").approved(serverCheck); // match all subscriptions\n this.store.when(\"downloadable content\").downloaded(showContent);\n```\n\nThe `updated` event is fired whenever one of the fields of a product is\nchanged (its `owned` status for instance).\n\nThis event provides a generic way to track the statuses of your purchases,\nto unlock features when needed and to refresh your views accordingly.\n\n## Registering products\n\nThe store needs to know the type and identifiers of your products before you\ncan use them in your code.\n\nUse `store.register()` to define them before your first call to `store.refresh()`.\n\nOnce registered, you can use `store.get()` to retrieve an `IAPProduct` object.\n\n```typescript\n this.store.register({\n   id: \"my_consumable1\",\n   type: this.store.CONSUMABLE\n });\n ...\n const p = this.store.get(\"my_consumable1\");\n```\n\nThe product `id` and `type` have to match products defined in your\nApple, Google or Microsoft developer consoles.\n\nLearn more about it [from the wiki](https://github.com/j3k0/cordova-plugin-purchase/wiki).\n\n## Displaying products\n\nRight after you registered your products, nothing much is known about them\nexcept their `id`, `type` and an optional `alias`.\n\nWhen you perform the initial call to `store.refresh()`, the platforms' server will\nbe contacted to load informations about the registered products: human\nreadable `title` and `description`, `price`, etc.\n\nThis isn't an optional step, store owners require you\nto display information about a product exactly as retrieved from their server: no\nhard-coding of price and title allowed! This is also convenient for you\nas you can change the price of your items knowing that it'll be reflected instantly\non your clients' devices.\n\nNote that the information may not be available when the first view that needs\nthem appears on screen. For you, the best option is to have your view monitor\nchanges made to the product.\n\n## Purchasing\n\n#### initiate a purchase\n\nPurchases are initiated using the `store.order(\"some_product_id\")` method.\n\nThe store will manage the internal purchase flow. It'll end:\n\n - with an `approved` event. The product enters the `APPROVED` state.\n - with a `cancelled` event. The product gets back to the `VALID` state.\n - with an `error` event. The product gets back to the `VALID` state.\n\nSee the product life-cycle section for details about product states.\n\n#### finish a purchase\n\nOnce the transaction is approved, the product still isn't owned: the store needs\nconfirmation that the purchase was delivered before closing the transaction.\n\nTo confirm delivery, you'll use the `product.finish()` method.\n\n#### example usage\n\nDuring initialization:\n```typescript\nthis.store.when(\"extra_chapter\").approved((product: IAPProduct) => {\n  // download the feature\n  app.downloadExtraChapter()\n  .then(() => product.finish());\n});\n```\n\nWhen the purchase button is clicked:\n```typescript\nthis.store.order(\"extra_chapter\");\n```\n\n#### un-finished purchases\n\nIf your app wasn't able to deliver the content, `product.finish()` won't be called.\n\nDon't worry: the `approved` event will be re-triggered the next time you\ncall `store.refresh()`, which can very well be the next time\nthe application starts. Pending transactions are persistant.\n\n#### simple case\n\nIn the most simple case, where:\n\n - delivery of purchases is only local ;\n - you don't want (or need) to implement receipt validation ;\n\nYou may just want to finish all purchases automatically. You can do it this way:\n```js\nthis.store.when(\"product\").approved((p: IAPProduct) => p.finish());\n```\n\nNOTE: the \"product\" query will match any purchases (see \"queries\" to learn more details about queries).\n\n## Receipt validation\n\nTo get the most up-to-date information about purchases (in case a purchase have been canceled, or a subscription renewed),\nyou should implement server side receipt validation.\n\nThis also protects you against fake \"purchases\", made by some users using\n\"free in-app purchase\" apps on their devices.\n\nWhen a purchase has been approved by the store, it's enriched with\ntransaction information (see `product.transaction` attribute).\n\nTo verify a purchase you'll have to do three things:\n\n - configure the validator.\n - call `product.verify()` from the `approved` event, before finishing the transaction.\n - finish the transaction when transaction is `verified`.\n\n**Shameless Plug**: this is a feature many users struggle with, so as the author of this plugin, we can provide it to you as-a-service: https://billing.fovea.cc/\n(which is free until you start making serious money)\n\n#### example using a validation URL\n\n```js\nthis.store.validator = \"https://billing.fovea.cc/\";\n\nthis.store.when(\"my stuff\")\n  .approved((p: IAPProduct) => p.verify())\n  .verified((p: IAPProduct) => p.finish());\n```\n\n## Subscriptions\n\nFor subscription, you MUST implement remote receipt validation.\n\nWhen the receipt validator returns a `store.PURCHASE_EXPIRED` error code, the subscription will\nautomatically loose its `owned` status.\n\nTypically, you'll enable and disable access to your content this way.\n```typescript\nthis.store.when(\"my_subcription\").updated((product: IAPProduct) => {\n  if (product.owned)\n    app.subscriberMode();\n  else\n    app.guestMode();\n});\n```\n\n## Product life-cycle\n\nA product will change state during the application execution.\n\nFind below a diagram of the different states a product can pass by.\n\n```\nREGISTERED +--> INVALID\n           |\n           +--> VALID +--> REQUESTED +--> INITIATED +-+\n                                                      |\n                ^      +------------------------------+\n                |      |\n                |      |             +--> DOWNLOADING +--> DOWNLOADED +\n                |      |             |                                |\n                |      +--> APPROVED +--------------------------------+--> FINISHED +--> OWNED\n                |                                                             |\n                +-------------------------------------------------------------+\n\n#### Notes\n\n - When finished, a consumable product will get back to the `VALID` state, while other will enter the `OWNED` state.\n - Any error in the purchase process will bring a product back to the `VALID` state.\n - During application startup, products may go instantly from `REGISTERED` to `APPROVED` or `OWNED`, for example if they are purchased non-consumables or non-expired subscriptions.\n - Non-Renewing Subscriptions are iOS products only. Please see the [iOS Non Renewing Subscriptions documentation](https://github.com/j3k0/cordova-plugin-purchase/blob/master/doc/ios.md#non-renewing) for a detailed explanation.\n\n## events\n\n - `loaded(IAPProduct)`\n   - Called when product data is loaded from the store.\n - `updated(IAPProduct)`\n   - Called when any change occured to a product.\n - `error(err)`\n   - Called when an order failed.\n   - The `err` parameter is an error object\n - `approved(IAPProduct)`\n   - Called when a product order is approved.\n - `owned(IAPProduct)`\n   - Called when a non-consumable product or subscription is owned.\n - `cancelled(IAPProduct)`\n   - Called when a product order is cancelled by the user.\n - `refunded(IAPProduct)`\n   - Called when an order is refunded by the user.\n - Actually, all other product states have their promise\n   - `registered`, `valid`, `invalid`, `requested`,\n     `initiated` and `finished`\n - `verified(IAPProduct)`\n   - Called when receipt validation successful\n - `unverified(IAPProduct)`\n   - Called when receipt verification failed\n - `expired(IAPProduct)`\n   - Called when validation find a subscription to be expired\n - `downloading(IAPProduct, progress, time_remaining)`\n   - Called when content download is started\n - `downloaded(IAPProduct)`\n   - Called when content download has successfully completed\n\n## Learn More\n\n - [GitHub](https://github.com/j3k0/cordova-plugin-purchase)\n - [GitBook](https://purchase.cordova.fovea.cc/)\n - [Wiki](https://github.com/j3k0/cordova-plugin-purchase/wiki)\n - [API reference](https://github.com/j3k0/cordova-plugin-purchase/blob/master/doc/api.md)\n\n## Technical Support or Questions\n\nIf you have questions or need help integrating In-App Purchase, [Open an Issue on GitHub](https://github.com/j3k0/cordova-plugin-purchase/issues) or email us at _support@fovea.cc_.\n\n@interfaces\nIAPProduct\nIAPProductOptions\nIAPProductEvents\n```\n",
  "platforms": [
    "iOS",
    "Android",
    "Windows"
  ],
  "repo": "https://github.com/j3k0/cordova-plugin-purchase",
  "cordovaPlugin": {
    "name": "cc.fovea.cordova.purchase"
  }
}