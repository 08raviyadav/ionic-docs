{
  "tag": "ion-reorder-group",
  "encapsulation": "none",
  "readme": "# ion-reorder-group\n\nThe reorder group is a wrapper component for items with the `ion-reorder` component, Check [Reorder documentation](../reorder/) for further information about the anchor component that is used to drag items within the `ion-reorder-group` list.\n\nOnce the user drags an item and drops it in a new position, the `ionItemReorder` event is dispatched. A handler for it must be implemented by the developer to commit changes.\n\n```js\nreorderGroup.addEventListener('ionItemReorder', (ev) => {\n  console.log(`Moving item from ${ev.detail.from} to ${ev.detail.to}`);\n\n  this.dataList = reorderArray(this.dataList, ev.detail.from, ev.detail.to);\n  ev.detail.complete();\n});\n```\n\nThe event's detail includes all the relevant information about the reorder operation, including the `from` and `to` indexes. In the context of reordering, an item moves `from` index X `to` index Y.\n\nFor example, in this list we move the item at index `0` to the index `3`:\n\n```\nBEFORE | AFTER\n  0    |   1\n  1    |   2\n  2    |   3\n  3    |   0\n  4    |   4\n```\n\n```\ndetail: {\n  from: 0\n  to: 3\n}\n```\n\nOnce the data structure has been updated to reflect the reorder change, the `complete()` method must be called.\nThis method finishes the reorder operation and resets all the CSS transforms applied by the `ion-reorder-group` component.\n\nFortunately this `complete()` method can optionally accept an array as input and it will return a reordered copy, based in `detail.from` and `detail.to`.\n\n```ts\nthis.dataList = reorderGroup.complete(this.dataList);\n```\n",
  "docs": "The reorder group is a wrapper component for items with the `ion-reorder` component, Check [Reorder documentation](../reorder/) for further information about the anchor component that is used to drag items within the `ion-reorder-group` list.\n\nOnce the user drags an item and drops it in a new position, the `ionItemReorder` event is dispatched. A handler for it must be implemented by the developer to commit changes.\n\n```js\nreorderGroup.addEventListener('ionItemReorder', (ev) => {\n  console.log(`Moving item from ${ev.detail.from} to ${ev.detail.to}`);\n\n  this.dataList = reorderArray(this.dataList, ev.detail.from, ev.detail.to);\n  ev.detail.complete();\n});\n```\n\nThe event's detail includes all the relevant information about the reorder operation, including the `from` and `to` indexes. In the context of reordering, an item moves `from` index X `to` index Y.\n\nFor example, in this list we move the item at index `0` to the index `3`:\n\n```\nBEFORE | AFTER\n  0    |   1\n  1    |   2\n  2    |   3\n  3    |   0\n  4    |   4\n```\n\n```\ndetail: {\n  from: 0\n  to: 3\n}\n```\n\nOnce the data structure has been updated to reflect the reorder change, the `complete()` method must be called.\nThis method finishes the reorder operation and resets all the CSS transforms applied by the `ion-reorder-group` component.\n\nFortunately this `complete()` method can optionally accept an array as input and it will return a reordered copy, based in `detail.from` and `detail.to`.\n\n```ts\nthis.dataList = reorderGroup.complete(this.dataList);\n```",
  "docsTags": [],
  "usage": {
    "angular": "```html\n<ion-content>\n  <ion-list>\n    <ion-reorder-group>\n\n      <ion-item>\n        <ion-label>\n          Item 1\n        </ion-label>\n        <ion-reorder slot=\"end\"></ion-reorder>\n      </ion-item>\n\n      <ion-item>\n        <ion-label>\n          Item 2 (default ion-reorder slot=\"start\")\n        </ion-label>\n        <ion-reorder slot=\"start\"></ion-reorder>\n      </ion-item>\n\n      <ion-item>\n        <ion-label>\n          Item 3 (custom ion-reorder)\n        </ion-label>\n        <ion-reorder slot=\"end\">\n          <ion-icon name=\"pizza\"></ion-icon>\n        </ion-reorder>\n      </ion-item>\n\n      <ion-item>\n        <ion-label>\n          Item 4 (custom ion-reorder slot=\"start\")\n        </ion-label>\n        <ion-reorder slot=\"start\">\n          <ion-icon name=\"pizza\"></ion-icon>\n        </ion-reorder>\n      </ion-item>\n\n      <ion-reorder>\n        <ion-item>\n          <ion-label>\n            Item 5 (the whole item can be dragged)\n          </ion-label>\n          </ion-item>\n      </ion-reorder>\n\n    </ion-reorder-group>\n  </ion-list>\n</ion-content>\n```\n",
    "javascript": "```html\n<ion-content>\n  <ion-list>\n    <ion-reorder-group disabled=\"false\">\n\n      <ion-item>\n        <ion-label>\n          Item 1\n        </ion-label>\n        <ion-reorder slot=\"end\"></ion-reorder>\n      </ion-item>\n\n      <ion-item>\n        <ion-label>\n          Item 2 (default ion-reorder slot=\"start\")\n        </ion-label>\n        <ion-reorder slot=\"start\"></ion-reorder>\n      </ion-item>\n\n      <ion-item>\n        <ion-label>\n          Item 3 (custom ion-reorder)\n        </ion-label>\n        <ion-reorder slot=\"end\">\n          <ion-icon name=\"pizza\"></ion-icon>\n        </ion-reorder>\n      </ion-item>\n\n      <ion-item>\n        <ion-label>\n          Item 4 (custom ion-reorder slot=\"start\")\n        </ion-label>\n        <ion-reorder slot=\"start\">\n          <ion-icon name=\"pizza\"></ion-icon>\n        </ion-reorder>\n      </ion-item>\n\n      <ion-reorder>\n        <ion-item>\n          <ion-label>\n            Item 5 (the whole item can be dragged)\n          </ion-label>\n          </ion-item>\n      </ion-reorder>\n\n    </ion-reorder-group>\n  </ion-list>\n</ion-content>\n```\n\n```javascript\nconst reorderGroup = document.querySelector('ion-reorder-group');\nreorderGroup.addEventListener('ionItemReorder', ({detail}) => {\n  // finishing the reorder, true means ion-reorder-group with reorder the DOM\n  detail.complete(true);\n\n  // or:\n  // reorderGroup.complete(true)\n});\n```",
    "react": "```tsx\nimport React from 'react';\n\nimport { IonContent, IonList, IonItem, IonLabel, IonReorder, IonReorderGroup, IonIcon } from '@ionic/react';\n\nconst Example: React.SFC<{}> = () => (\n\n  <IonContent>\n    <IonList>\n      <IonReorderGroup>\n\n        <IonItem>\n          <IonLabel>\n            Item 1\n          </IonLabel>\n          <IonReorder slot=\"end\"></IonReorder>\n        </IonItem>\n\n        <IonItem>\n          <IonLabel>\n            Item 2 (default ion-reorder slot=\"start\")\n          </IonLabel>\n          <IonReorder slot=\"start\"></IonReorder>\n        </IonItem>\n\n        <IonItem>\n          <IonLabel>\n            Item 3 (custom ion-reorder)\n          </IonLabel>\n          <IonReorder slot=\"end\">\n            <IonIcon name=\"pizza\" />\n          </IonReorder>\n        </IonItem>\n\n        <IonItem>\n          <IonLabel>\n            Item 4 (custom ion-reorder slot=\"start\")\n          </IonLabel>\n          <IonReorder slot=\"start\">\n            <IonIcon name=\"pizza\" />\n          </IonReorder>\n        </IonItem>\n\n        <IonReorder>\n          <IonItem>\n            <IonLabel>\n              Item 5 (the whole item can be dragged)\n            </IonLabel>\n            </IonItem>\n        </IonReorder>\n\n      </IonReorderGroup>\n    </IonList>\n  </IonContent>\n);\n\nexport default Example\n",
    "vue": "```html\n<template>\n  <ion-content>\n    <ion-list>\n      <ion-reorder-group>\n\n        <ion-item>\n          <ion-label>\n            Item 1\n          </ion-label>\n          <ion-reorder slot=\"end\"></ion-reorder>\n        </ion-item>\n\n        <ion-item>\n          <ion-label>\n            Item 2 (default ion-reorder slot=\"start\")\n          </ion-label>\n          <ion-reorder slot=\"start\"></ion-reorder>\n        </ion-item>\n\n        <ion-item>\n          <ion-label>\n            Item 3 (custom ion-reorder)\n          </ion-label>\n          <ion-reorder slot=\"end\">\n            <ion-icon name=\"pizza\"></ion-icon>\n          </ion-reorder>\n        </ion-item>\n\n        <ion-item>\n          <ion-label>\n            Item 4 (custom ion-reorder slot=\"start\")\n          </ion-label>\n          <ion-reorder slot=\"start\">\n            <ion-icon name=\"pizza\"></ion-icon>\n          </ion-reorder>\n        </ion-item>\n\n        <ion-reorder>\n          <ion-item>\n            <ion-label>\n              Item 5 (the whole item can be dragged)\n            </ion-label>\n            </ion-item>\n        </ion-reorder>\n\n      </ion-reorder-group>\n    </ion-list>\n  </ion-content>\n</template>\n```\n"
  },
  "props": [
    {
      "name": "disabled",
      "type": "boolean",
      "mutable": false,
      "attr": "disabled",
      "reflectToAttr": false,
      "docs": "If `true`, the reorder will be hidden.",
      "docsTags": [],
      "default": "true",
      "optional": false,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "complete",
      "returns": {
        "type": "Promise<any>",
        "docs": ""
      },
      "signature": "complete(listOrReorder?: boolean | any[] | undefined) => Promise<any>",
      "parameters": [
        {
          "name": "listOrReorder",
          "type": "any[] | boolean | undefined",
          "docs": ""
        }
      ],
      "docs": "This method must be called once the `ionItemReorder` event is handled in order\nto complete the reorder operation.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "ionItemReorder",
      "detail": "ItemReorderEventDetail",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Event that needs to be listened to in order to complete the reorder action.\nOnce the event has been emitted, the `complete()` method then needs\nto be called in order to finalize the reorder action.",
      "docsTags": []
    }
  ],
  "styles": [],
  "slots": []
}