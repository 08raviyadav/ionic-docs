{
  "tag": "ion-action-sheet",
  "encapsulation": "scoped",
  "readme": "# ion-action-sheet\n\nAction Sheetは複数の選択肢を表示するダイアログです。アプリのコンテンツ上に表示され、ユーザが手動で破棄しないとアプリの利用を再開することはできません。`ios` modeでは、破壊的な選択肢は明示されます（コンテンツの削除などは赤字などでわかりやすく表示されます）。Action Sheetを破棄するには、背景をタップする、デスクトップのパソコンの場合はエスケープキーを押すなど、複数の選択肢があります。\n\n### Creating\n\nAction Sheetは、 [Action Sheet Controller](../action-sheet-controller) を使って、 `buttons` とそれぞれのボタンごとに `text` とオプションで `handler` と `role` をつけて作成します。handlerの返り値が `false` の場合、Action Sheetは破棄されません。Action Sheetはオプションで `title`, `subTitle` と `icon` を持つことができます。.\n\n### Buttons\n\nButtonの `role` プロパティは、 `destructive` か `cancel` のどちらかを利用できます。 roleプロパティがない場合は、プラットフォームに応じたデフォルトの外観となります。`cancel` role を持つButtonは、`buttons` 配列のどこに配置してもAction Sheetの最下部に表示されます。 Note: `destructive` roleをつけるButtonは、一番上のButtonとして配置することをおすすめします。また、背景をタップしてAction Sheetを破棄した場合、cancel role に設定されているhandlerが実行されます。\n\n",
  "docs": "An Action Sheet is a dialog that displays a set of options. It appears on top of the app's content, and must be manually dismissed by the user before they can resume interaction with the app. Destructive options are made obvious in `ios` mode. There are multiple ways to dismiss the action sheet, including tapping the backdrop or hitting the escape key on desktop.",
  "docsTags": [],
  "usage": {
    "angular": "```typescript\nimport { Component } from '@angular/core';\nimport { ActionSheetController } from '@ionic/angular';\n\n@Component({\n  selector: 'action-sheet-example',\n  templateUrl: 'action-sheet-example.html',\n  styleUrls: ['./action-sheet-example.css'],\n})\nexport class ActionSheetExample {\n\n  constructor(public actionSheetController: ActionSheetController) {}\n\n  async presentActionSheet() {\n    const actionSheet = await this.actionSheetController.create({\n      header: 'Albums',\n      buttons: [{\n        text: 'Delete',\n        role: 'destructive',\n        icon: 'trash',\n        handler: () => {\n          console.log('Delete clicked');\n        }\n      }, {\n        text: 'Share',\n        icon: 'share',\n        handler: () => {\n          console.log('Share clicked');\n        }\n      }, {\n        text: 'Play (open modal)',\n        icon: 'arrow-dropright-circle',\n        handler: () => {\n          console.log('Play clicked');\n        }\n      }, {\n        text: 'Favorite',\n        icon: 'heart',\n        handler: () => {\n          console.log('Favorite clicked');\n        }\n      }, {\n        text: 'Cancel',\n        icon: 'close',\n        role: 'cancel',\n        handler: () => {\n          console.log('Cancel clicked');\n        }\n      }]\n    });\n    await actionSheet.present();\n  }\n\n}\n```\n",
    "javascript": "```javascript\nasync function presentActionSheet() {\n  const actionSheetController = document.querySelector('ion-action-sheet-controller');\n  await actionSheetController.componentOnReady();\n\n  const actionSheet = await actionSheetController.create({\n    header: \"Albums\",\n    buttons: [{\n      text: 'Delete',\n      role: 'destructive',\n      icon: 'trash',\n      handler: () => {\n        console.log('Delete clicked');\n      }\n    }, {\n      text: 'Share',\n      icon: 'share',\n      handler: () => {\n        console.log('Share clicked');\n      }\n    }, {\n      text: 'Play (open modal)',\n      icon: 'arrow-dropright-circle',\n      handler: () => {\n        console.log('Play clicked');\n      }\n    }, {\n      text: 'Favorite',\n      icon: 'heart',\n      handler: () => {\n        console.log('Favorite clicked');\n      }\n    }, {\n      text: 'Cancel',\n      icon: 'close',\n      role: 'cancel',\n      handler: () => {\n        console.log('Cancel clicked');\n      }\n    }]\n  });\n  await actionSheet.present();\n}\n```\n",
    "react": "```typescript\nimport React, { Component } from 'react'\nimport { IonActionSheet } from '@ionic/react';\n\ntype Props = {}\ntype State = {\n  showActionSheet: boolean\n}\n\nexport default class ActionSheetExample extends Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      showActionSheet: false\n    };\n  }\n\n  render() {\n    return (\n      <IonActionSheet\n        isOpen={this.state.showActionSheet}\n        onDidDismiss={() => this.setState(() => ({ showActionSheet: false }))}\n        buttons={[{\n          text: 'Delete',\n          role: 'destructive',\n          icon: 'trash',\n          handler: () => {\n            console.log('Delete clicked');\n          }\n        }, {\n          text: 'Share',\n          icon: 'share',\n          handler: () => {\n            console.log('Share clicked');\n          }\n        }, {\n          text: 'Play (open modal)',\n          icon: 'arrow-dropright-circle',\n          handler: () => {\n            console.log('Play clicked');\n          }\n        }, {\n          text: 'Favorite',\n          icon: 'heart',\n          handler: () => {\n            console.log('Favorite clicked');\n          }\n        }, {\n          text: 'Cancel',\n          icon: 'close',\n          role: 'cancel',\n          handler: () => {\n            console.log('Cancel clicked');\n          }\n        }]}\n      >\n      </IonActionSheet>\n    );\n  }\n}\n\n```\n",
    "vue": "```html\n<template>\n  <IonVuePage :title=\"'Action Sheet'\">\n    <ion-button @click=\"presentActionSheet\">Show Action Sheet</ion-button>\n  </IonVuePage>\n</template>\n\n<script>\nexport default {\n  methods: {\n    presentActionSheet() {\n      return this.$ionic.actionSheetController\n        .create({\n          header: 'Albums',\n          buttons: [\n            {\n              text: 'Delete',\n              role: 'destructive',\n              icon: 'trash',\n              handler: () => {\n                console.log('Delete clicked')\n              },\n            },\n            {\n              text: 'Share',\n              icon: 'share',\n              handler: () => {\n                console.log('Share clicked')\n              },\n            },\n            {\n              text: 'Play (open modal)',\n              icon: 'arrow-dropright-circle',\n              handler: () => {\n                console.log('Play clicked')\n              },\n            },\n            {\n              text: 'Favorite',\n              icon: 'heart',\n              handler: () => {\n                console.log('Favorite clicked')\n              },\n            },\n            {\n              text: 'Cancel',\n              icon: 'close',\n              role: 'cancel',\n              handler: () => {\n                console.log('Cancel clicked')\n              },\n            },\n          ],\n        })\n        .then(a => a.present())\n    },\n  },\n}\n</script>\n```\n"
  },
  "props": [
    {
      "name": "animated",
      "type": "boolean",
      "mutable": false,
      "attr": "animated",
      "reflectToAttr": false,
      "docs": "If `true`, the action sheet will animate.",
      "docsTags": [],
      "default": "true",
      "optional": false,
      "required": false
    },
    {
      "name": "backdropDismiss",
      "type": "boolean",
      "mutable": false,
      "attr": "backdrop-dismiss",
      "reflectToAttr": false,
      "docs": "If `true`, the action sheet will be dismissed when the backdrop is clicked.",
      "docsTags": [],
      "default": "true",
      "optional": false,
      "required": false
    },
    {
      "name": "buttons",
      "type": "(string | ActionSheetButton)[]",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "An array of buttons for the action sheet.",
      "docsTags": [],
      "default": "[]",
      "optional": false,
      "required": false
    },
    {
      "name": "cssClass",
      "type": "string | string[] | undefined",
      "mutable": false,
      "attr": "css-class",
      "reflectToAttr": false,
      "docs": "Additional classes to apply for custom CSS. If multiple classes are\nprovided they should be separated by spaces.",
      "docsTags": [],
      "optional": true,
      "required": false
    },
    {
      "name": "enterAnimation",
      "type": "((Animation: Animation, baseEl: any, opts?: any) => Promise<Animation>) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Animation to use when the action sheet is presented.",
      "docsTags": [],
      "optional": true,
      "required": false
    },
    {
      "name": "header",
      "type": "string | undefined",
      "mutable": false,
      "attr": "header",
      "reflectToAttr": false,
      "docs": "Title for the action sheet.",
      "docsTags": [],
      "optional": true,
      "required": false
    },
    {
      "name": "keyboardClose",
      "type": "boolean",
      "mutable": false,
      "attr": "keyboard-close",
      "reflectToAttr": false,
      "docs": "If `true`, the keyboard will be automatically dismissed when the overlay is presented.",
      "docsTags": [],
      "default": "true",
      "optional": false,
      "required": false
    },
    {
      "name": "leaveAnimation",
      "type": "((Animation: Animation, baseEl: any, opts?: any) => Promise<Animation>) | undefined",
      "mutable": false,
      "reflectToAttr": false,
      "docs": "Animation to use when the action sheet is dismissed.",
      "docsTags": [],
      "optional": true,
      "required": false
    },
    {
      "name": "mode",
      "type": "\"ios\" | \"md\"",
      "mutable": false,
      "attr": "mode",
      "reflectToAttr": false,
      "docs": "The mode determines which platform styles to use.",
      "docsTags": [],
      "optional": false,
      "required": false
    },
    {
      "name": "subHeader",
      "type": "string | undefined",
      "mutable": false,
      "attr": "sub-header",
      "reflectToAttr": false,
      "docs": "Subtitle for the action sheet.",
      "docsTags": [],
      "optional": true,
      "required": false
    },
    {
      "name": "translucent",
      "type": "boolean",
      "mutable": false,
      "attr": "translucent",
      "reflectToAttr": false,
      "docs": "If `true`, the action sheet will be translucent. Only applies when the mode is `\"ios\"` and the device supports backdrop-filter.",
      "docsTags": [],
      "default": "false",
      "optional": false,
      "required": false
    }
  ],
  "methods": [
    {
      "name": "dismiss",
      "returns": {
        "type": "Promise<boolean>",
        "docs": ""
      },
      "signature": "dismiss(data?: any, role?: string | undefined) => Promise<boolean>",
      "parameters": [
        {
          "name": "data",
          "type": "any",
          "docs": ""
        },
        {
          "name": "role",
          "type": "string | undefined",
          "docs": ""
        }
      ],
      "docs": "Dismiss the action sheet overlay after it has been presented.",
      "docsTags": []
    },
    {
      "name": "onDidDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<any>>",
        "docs": ""
      },
      "signature": "onDidDismiss() => Promise<OverlayEventDetail<any>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the action-sheet did dismiss.",
      "docsTags": []
    },
    {
      "name": "onWillDismiss",
      "returns": {
        "type": "Promise<OverlayEventDetail<any>>",
        "docs": ""
      },
      "signature": "onWillDismiss() => Promise<OverlayEventDetail<any>>",
      "parameters": [],
      "docs": "Returns a promise that resolves when the action-sheet will dismiss.",
      "docsTags": []
    },
    {
      "name": "present",
      "returns": {
        "type": "Promise<void>",
        "docs": ""
      },
      "signature": "present() => Promise<void>",
      "parameters": [],
      "docs": "Present the action sheet overlay after it has been created.",
      "docsTags": []
    }
  ],
  "events": [
    {
      "event": "ionActionSheetDidDismiss",
      "detail": "OverlayEventDetail",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the alert has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionActionSheetDidPresent",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted after the alert has presented.",
      "docsTags": []
    },
    {
      "event": "ionActionSheetWillDismiss",
      "detail": "OverlayEventDetail",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the alert has dismissed.",
      "docsTags": []
    },
    {
      "event": "ionActionSheetWillPresent",
      "detail": "void",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": "Emitted before the alert has presented.",
      "docsTags": []
    }
  ],
  "styles": [
    {
      "name": "--background",
      "annotation": "prop",
      "docs": "Background of the action sheet group"
    },
    {
      "name": "--background-activated",
      "annotation": "prop",
      "docs": "Background of the activated action sheet button"
    },
    {
      "name": "--background-selected",
      "annotation": "prop",
      "docs": "Background of the selected action sheet button"
    },
    {
      "name": "--color",
      "annotation": "prop",
      "docs": "Color of the action sheet text"
    },
    {
      "name": "--height",
      "annotation": "prop",
      "docs": "height of the action sheet"
    },
    {
      "name": "--max-height",
      "annotation": "prop",
      "docs": "Maximum height of the action sheet"
    },
    {
      "name": "--max-width",
      "annotation": "prop",
      "docs": "Maximum width of the action sheet"
    },
    {
      "name": "--min-height",
      "annotation": "prop",
      "docs": "Minimum height of the action sheet"
    },
    {
      "name": "--min-width",
      "annotation": "prop",
      "docs": "Minimum width of the action sheet"
    },
    {
      "name": "--width",
      "annotation": "prop",
      "docs": "Width of the action sheet"
    }
  ],
  "slots": []
}
